//空值（Null ）是一个值，它代表没有值。在有空值的语言中，变量总是这两种状态之一：空值和非空值
enum Option{
	Some(T),//泛型类参数
	None,
}
let some_number = Some(5);
let some_string = Some("a string");

let absent_number:Option<i32> = none


//当在 Rust 中拥有一个像 i8 这样类型的值时，编译器确保它总是有一个有效的值。
//我们可以自信使用而无需判空。只有当使用 Option<i8> （或者任何用到的类型）的时候需要担心可能没有一个值，而编译器会确保我们在使用值之前处理为空的情况

//总的来说，为了使用 Option<T> 值，需要编写处理每个成员的代码。我们想要一些代码只当拥有 Some(T) 值时运
//行，这些代码允许使用其中的 T 。也希望一些代码当在 None 值时运行，这些代码并没有一个可用的 T
//值。 match 表达式就是这么一个处理枚举的控制流结构：它会根据枚举的成员运行不同的代码，这些代码可以使用匹配到的值中的数据

